generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id          String       @id @default(uuid())
  name        String
  userId      String
  currency    Currency     @default(USD)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  deletedAt   DateTime?
  user        User         @relation(fields: [userId], references: [id])
  operations  Operation[]
  creditCards CreditCard[]
}

model Category {
  id         String          @id @default(uuid())
  userId     String
  name       String
  type       TransactionType
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @default(now()) @updatedAt
  deletedAt  DateTime?
  user       User            @relation(fields: [userId], references: [id])
  operations Operation[]
}

model CreditCard {
  id         String          @id @default(uuid())
  accountId  String
  userId     String
  name       String
  brand      CreditCardBrand
  limit      Float
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @default(now()) @updatedAt
  deletedAt  DateTime?
  user       User            @relation(fields: [userId], references: [id])
  account    Account         @relation(fields: [accountId], references: [id])
  operations Operation[]
}

model Operation {
  id           String          @id @default(uuid())
  accountId    String
  categoryId   String?
  userId       String
  creditCardId String?
  name         String
  value        Float
  isPaid       Boolean         @default(false)
  type         TransactionType
  paidAt       DateTime?       @default(now())
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @default(now()) @updatedAt
  deletedAt    DateTime?
  account      Account         @relation(fields: [accountId], references: [id])
  category     Category?       @relation(fields: [categoryId], references: [id])
  creditCard   CreditCard?     @relation(fields: [creditCardId], references: [id])
  user         User            @relation(fields: [userId], references: [id])
}

model User {
  id                   String       @id @default(uuid())
  email                String       @unique
  password             String
  firstName            String
  lastName             String
  language             Locale       @default(enUS)
  hasVerifiedEmail     Boolean      @default(false)
  hashToVerifyEmail    String?      @unique
  hashToChangePassword String?      @unique
  birthDay             DateTime?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @default(now()) @updatedAt
  deletedAt            DateTime?
  accounts             Account[]
  categories           Category[]
  creditCards          CreditCard[]
  operations           Operation[]
}

enum Currency {
  USD
  EUR
  BRL
  GBP
}

enum CreditCardBrand {
  AmericanExpress
  BNDES
  Dinners
  ELO
  HiperCard
  MasterCard
  Other
  SoroCard
  Visa
}

enum TransactionType {
  CreditCard
  Deposit
  FixedExpense
  VariableExpense
}

enum Locale {
  ptBR
  enUS
}
